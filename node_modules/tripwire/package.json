{
  "name": "tripwire",
  "author": {
    "name": "Tomasz Janczuk",
    "email": "tomasz@janczuk.org",
    "url": "http://tomasz.janczuk.org"
  },
  "version": "0.6.0",
  "description": "Break out from scripts blocking node.js event loop",
  "tags": [
    "event loop",
    "hang"
  ],
  "main": "./lib/tripwire.js",
  "engines": {
    "node": "0.6.x"
  },
  "licenses": [
    {
      "type": "Apache",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  ],
  "dependencies": {},
  "devDependencies": {
    "mocha": "1.2.0"
  },
  "homepage": "https://github.com/tjanczuk/tripwire",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/tjanczuk/tripwire.git"
  },
  "bugs": {
    "url": "http://github.com/tjanczuk/tripwire/issues"
  },
  "scripts": {
    "install": "node checkplatform.js"
  },
  "readme": "Tripwire\n========\n\nTripwire allows node.js applications to termiante execution of scripts that block the node.js event loop. For example, you can break out from infinite loops like `while(true)`. This functionality is useful if you are executing untrusted code within your node.js process. \n\nTripwire contains a native extension of node.js and currently supports Windows, Mac, and Linux. I do take contributions. \n\nInstall with:\n\n```\nnpm install tripwire\n```\n\nThen in your application, you can put a limit on the total amout of CPU time (kernel and user mode combined) the event loop is blocked before the execution of the script is terminated:\n\n```javascript\nvar tripwire = require('tripwire');\n\nprocess.on('uncaughtException', function (e) {\n  console.log('The event loop was blocked for longer than 2000 milliseconds');\n  process.exit(1);\n});\n\n// set the limit of execution time to 2000 milliseconds\ntripwire.resetTripwire(2000);\n\n// execute code that will block the event loop for longer\nwhile(true);\n\n// clear the tripwire (in this case this code is never reached)\ntripwire.clearTripwire();\n```\n\nWhen the event loop is blocked for longer than the time specified in the call to `resetTripwire`, tripwire will terminate execution of the script. Node.js will subsequently execute the `uncaughtException` handler if one is registered. The exception passed to `uncaughtException` handler will be `null` in that case. In order to determine whether the exception was indeed caused by tripwire, an optional context can be established during a call to `resetTripwire` and retrtieved with a call to `getContext`. The `getContext` will return `undefined` if the tripwire had not been triggered. \n\n```javascript\nvar tripwire = require('tripwire');\n\nprocess.on('uncaughtException', function (e) {\n  if (undefined === tripwire.getContext())\n    console.log('The exception was not caused by tripwire.');\n  else\n    console.log('The event loop was blocked for longer than 2000 milliseconds');\n  process.exit(1);\n});\n\n// set the limit of execution time to 2000 milliseconds\nvar context = { someData: \"foobar\" };\ntripwire.resetTripwire(2000, context);\n```\n\nFor more samples, see [here](https://github.com/tjanczuk/tripwire/tree/master/samples).\n\n#### Running tests\n\nThere are a few mocha tests included that you can run with\n\n```\nmocha -R list\n```\n\n#### Building\n\nThe native component is included in the repository and not built during `npm install tripwire`.\n\nYou can rebuild the native component using [node-gyp](https://github.com/TooTallNate/node-gyp/). Currently the native component can be compiled on Windows, Mac, and Linux (I do take contributions).\n\nOn Windows:\n\n```\nnode-gyp configure build\ncopy build\\Release\\tripwire.node lib\\native\\windows\\x86\\\n```\n\nOn Mac:\n\n```\nnode-gyp configure build\ncp build\\Release\\tripwire.node lib\\native\\darwin\\x86\\\n```\n\nOn Linux:\n\n```\nnode-gyp configure build\ncp build\\Release\\tripwire.node lib\\native\\linux\\x86\\\n```",
  "readmeFilename": "README.md",
  "_id": "tripwire@0.6.0",
  "_shasum": "92fe147753f6f3ab223d8694fd1e9b2cea6003e1",
  "_from": "tripwire@0.6.0",
  "_resolved": "https://registry.npmjs.org/tripwire/-/tripwire-0.6.0.tgz"
}
